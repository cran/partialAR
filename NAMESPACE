useDynLib(partialAR, .registration=TRUE)
#exportPattern("^[[:alpha:]]+")

importFrom(Rcpp, evalCpp)
importFrom(graphics, plot)
import("zoo","parallel","MASS","tseries","data.table","KFAS","urca","plot3D")
importFrom(ggplot2,Facet)
importFrom(ggplot2,aes)
importFrom(ggplot2,facet_grid)
importFrom(ggplot2,geom_hline)
importFrom(ggplot2,geom_line)
importFrom(ggplot2,geom_vline)
importFrom(ggplot2,ggplot)
importFrom(ggplot2,ggtitle)
importFrom(ggplot2,label_parsed)
importFrom(ggplot2,label_bquote)
importFrom(ggplot2,scale_colour_discrete)
importFrom(ggplot2,scale_colour_manual)
importFrom(ggplot2,scale_linetype_manual)
importFrom(ggplot2,scale_size_manual)
importFrom(ggplot2,theme)
importFrom(ggplot2,xlab)
importFrom(ggplot2,ylab)
importFrom(grid,grid.layout)
importFrom(grid,grid.newpage)
importFrom(grid,pushViewport)
importFrom(grid,unit)
importFrom(grid,viewport)
importFrom("methods", "is")
importFrom("stats", "approx", "logLik", "median", "nlm", "optim", "optimize",
           "qchisq", "quantile", "rnorm", "rt", "sd", "var")
importFrom("utils", "read.table", "write.table")

export(estimate.par,
  pvmr.par,
  kalman.gain.par,
  fit.par,
  statehistory.par,
  loglik.par,
  likelihood_ratio.par,
  rpar,
  sample.likelihood_ratio.par,
  test.par,
  which.hypothesis.partest)
  S3method(print, par.fit)

S3method(plot, par.fit)
S3method(as.data.frame, par.fit)
S3method(print, partest)

